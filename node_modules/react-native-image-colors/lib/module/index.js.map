{"version":3,"sources":["index.ts"],"names":["NativeModules","Image","cache","MAX_KEY_LEN","ImageColors","RNImageColors","resolveImageSource","source","resolveAssetSource","uri","getColors","config","resolvedSrc","cachedResult","key","getItem","result","length","Error","setItem"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,KAAxB,QAAqC,cAArC;AACA,SAASC,KAAT,QAAsB,SAAtB;AAIA,MAAMC,WAAW,GAAG,GAApB;AAEA,MAAM;AAAEC,EAAAA,WAAW,EAAEC;AAAf,IAAiCL,aAAvC;;AAEA,MAAMM,kBAAkB,GAAIC,MAAD,IAAiD;AAC1E,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAOA,MAAP;AACD,GAFD,MAEO;AACL,WAAON,KAAK,CAACO,kBAAN,CAAyBD,MAAzB,EAAiCE,GAAxC;AACD;AACF,CAND;;AAQA,MAAMC,SAA2C,GAAG,OAAOH,MAAP,EAAeI,MAAf,KAA0B;AAC5E,QAAMC,WAAW,GAAGN,kBAAkB,CAACC,MAAD,CAAtC;;AAEA,MAAII,MAAJ,aAAIA,MAAJ,eAAIA,MAAM,CAAET,KAAZ,EAAmB;AACjB,UAAMW,YAAY,GAAGF,MAAM,CAACG,GAAP,GACjBZ,KAAK,CAACa,OAAN,CAAcJ,MAAM,CAACG,GAArB,CADiB,GAEjBZ,KAAK,CAACa,OAAN,CAAcH,WAAd,CAFJ;AAIA,QAAIC,YAAJ,EAAkB,OAAOA,YAAP;AACnB;;AAED,QAAMG,MAAM,GAAG,MAAMX,aAAa,CAACK,SAAd,CAAwBE,WAAxB,EAAqCD,MAArC,CAArB;;AAEA,MAAIA,MAAJ,aAAIA,MAAJ,eAAIA,MAAM,CAAET,KAAZ,EAAmB;AAAA;;AACjB,QAAI,CAACS,MAAM,CAACG,GAAR,IAAeF,WAAW,CAACK,MAAZ,GAAqBd,WAAxC,EAAqD;AACnD,YAAM,IAAIe,KAAJ,CACH,iIAAgIf,WAAY,mCADzI,CAAN;AAGD;;AAEDD,IAAAA,KAAK,CAACiB,OAAN,gBAAcR,MAAM,CAACG,GAArB,qDAA4BF,WAA5B,EAAyCI,MAAzC;AACD;;AAED,SAAOA,MAAP;AACD,CAxBD;;AA0BA,MAAMZ,WAAgC,GAAG;AACvCM,EAAAA,SADuC;AAEvCR,EAAAA;AAFuC,CAAzC;AAKA,eAAeE,WAAf","sourcesContent":["import { NativeModules, Image } from 'react-native'\nimport { cache } from './cache'\nimport type { ImageRequireSource } from 'react-native'\nimport type { RNImageColorsModule } from './types'\n\nconst MAX_KEY_LEN = 500\n\nconst { ImageColors: RNImageColors } = NativeModules\n\nconst resolveImageSource = (source: string | ImageRequireSource): string => {\n  if (typeof source === 'string') {\n    return source\n  } else {\n    return Image.resolveAssetSource(source).uri\n  }\n}\n\nconst getColors: RNImageColorsModule['getColors'] = async (source, config) => {\n  const resolvedSrc = resolveImageSource(source)\n\n  if (config?.cache) {\n    const cachedResult = config.key\n      ? cache.getItem(config.key)\n      : cache.getItem(resolvedSrc)\n\n    if (cachedResult) return cachedResult\n  }\n\n  const result = await RNImageColors.getColors(resolvedSrc, config)\n\n  if (config?.cache) {\n    if (!config.key && resolvedSrc.length > MAX_KEY_LEN) {\n      throw new Error(\n        `You enabled caching, but you didn't pass a key. We fallback to using the image URI as the key. However the URI is longer than ${MAX_KEY_LEN}. Please pass a short unique key.`\n      )\n    }\n\n    cache.setItem(config.key ?? resolvedSrc, result)\n  }\n\n  return result\n}\n\nconst ImageColors: RNImageColorsModule = {\n  getColors,\n  cache,\n}\n\nexport default ImageColors\n"]}